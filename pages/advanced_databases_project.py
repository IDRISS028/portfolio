import streamlit as st
from components import side, P_sub_side

# Configuration de Streamlit
st.set_page_config(
    page_title="Luxury Property Management",
    layout="wide",
    page_icon="üè†"
)

# Titre de la page
st.title("üè† Luxury Property Management ‚Äì Advanced Databases Project")

# On affiche le menu de gauche
side.side()

# On affiche le sous-menu de gauche
P_sub_side.sub_side()



st.write("""
Ce projet est une **application de gestion de propri√©t√©s de luxe** d√©velopp√©e dans le cadre du module **Advanced Databases**.  
L‚Äôobjectif √©tait de **concevoir et impl√©menter une base de donn√©es relationnelle et NoSQL** pour g√©rer les donn√©es complexes du secteur de l‚Äôimmobilier haut de gamme.
""")
st.divider()
st.subheader("üéØ Objectifs du Projet")
st.write("""
- **Concevoir une base relationnelle normalis√©e** pour repr√©senter les propri√©t√©s, transactions et clients.
- **Automatiser la gestion des commissions et des transactions** via **PL/SQL (triggers, proc√©dures)**.
- **Utiliser des approches Object-Relational (ORD)** pour mod√©liser des entit√©s complexes comme les annexes (piscines, garages, maisons d‚Äôh√¥tes).
- **Int√©grer NoSQL :**
  - **MongoDB** pour les descriptions multim√©dia et avis clients.
  - **Neo4J** pour les relations entre clients et propri√©t√©s.
- **Comparer SQL vs NoSQL** pour √©valuer les avantages selon le type de donn√©es.
""")
st.divider()
st.subheader("üõ†Ô∏è Technologies Utilis√©es")
st.markdown("""
| Aspect                  | Outils et Langages                                  |
|--------------------------|----------------------------------------------------|
| **Base Relationnelle**    | SQL, PL/SQL, Oracle Database                      |
| **Programmation**         | PL/SQL (proc√©dures, triggers, packages)           |
| **Object-Relational**     | Types, h√©ritage, tables imbriqu√©es                 |
| **NoSQL ‚Äì Document**      | MongoDB                                           |
| **NoSQL ‚Äì Graphes**       | Neo4J                                             |
| **Mod√©lisation**          | E/R, mod√®le logique, normalisation (1NF √† 6NF)   |
""", unsafe_allow_html=True)
st.divider()
st.subheader("üèÜ Ce que J‚Äôai Appris")
st.write("""
- **Conception de bases de donn√©es complexes** adapt√©es aux besoins m√©tiers.
- **Automatisation avec PL/SQL** : gestion des transactions, calcul des commissions, d√©clenchement d‚Äô√©v√©nements.
- **Mod√©lisation Objet-Relational (ORD)** : cr√©ation de types personnalis√©s et h√©ritage.
- **Int√©gration NoSQL** :
  - **MongoDB** pour la flexibilit√© documentaire.
  - **Neo4J** pour l‚Äôanalyse des relations sous forme de graphes.
- **Diff√©rences entre SQL et NoSQL** selon les cas d‚Äôusage (flexibilit√©, performances, structuration).
""")
st.divider()
st.subheader("üì¶ Fonctionnalit√©s Cl√©s")
st.write("""
- Gestion des **propri√©t√©s** (adresse, type, surface, √©quipements‚Ä¶).
- Suivi des **transactions** (ventes, locations, commissions dynamiques).
- Gestion des **visites VIP** et interactions clients.
- **Automatisation des calculs fiscaux et commissions** via PL/SQL.
- **Exploration des relations clients-propri√©t√©s** avec Neo4J.
""")
